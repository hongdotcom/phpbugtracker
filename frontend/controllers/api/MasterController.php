<?php

namespace frontend\controllers\api;

use common\helpers\ApiHandler;
//use common\helpers\CURL;
use common\helpers\AifinHelper;
use common\models\WebLang;
use yii\base\Exception;
use yii\web\Controller;
use Yii;

class MasterController extends Controller {

    public $enableCsrfValidation = false;
    public $lang;
    public $public = FALSE;
    public static $log;

    public function init() {
        try {
            if (Yii::$app->request->isGet)
                $lang = Yii::$app->request->get('lang', 'eng');
            else if (Yii::$app->request->isPost) {
                $lang = Yii::$app->request->post('lang', 'eng');
            } else
                $lang = 'eng';

            $this->lang = WebLang::validateLang($lang);
        } catch (Exception $e) {
            ApiHandler::failure($e->getMessage());
        }
    }

    public function beforeAction($action) {
        try {
            if (!$this->public) {
                $headers = apache_request_headers();

//                if (!isset($headers['Authorization']) && !isset($headers['authorization']))
//                    throw new Exception(WebLang::t("api_key_missing", $this->lang));
//
//                if (isset($headers['Authorization']))
//                    $authorization = $headers['Authorization'];
//
//                if (isset($headers['authorization']))
//                    $authorization = $headers['authorization'];

                if (Yii::$app->request->post('token') <> "aifindemo") {
                    throw new Exception(WebLang::t("illegal_api_key", $this->lang));
                }
//                $result = CURL::postBOV2("apicheck", ['apikey' => $authorization]);
//                $json = json_decode($result);
//
//                if (isset($json->error) && $json->error == 1)
//                    throw new Exception(WebLang::t("illegal_api_key", $this->lang));
//                $this->BOUser = $json;
            }

            return parent::beforeAction($action); // TODO: Change the autogenerated stub
        } catch (Exception $e) {
            ApiHandler::failure($e->getMessage());
        }
    }

    protected function getLimit($page, $pageSize) {
        if ($page == 0)
            return NULL;
        else
            return $pageSize;
    }

    protected function getOffset($page, $pageSize) {
        if ($page == 0)
            $offset = NULL;
        else {
            $offset = ($page - 1) * $pageSize;
            return $offset;
        }
    }

    public static function log($text) {
        self::$log .= date(AifinHelper::DATETIMEFORMAT) . " " . $text . "<br>";
    }    
    
    public function dump($text) {
        print_r($text) . "\r\n<br>";
    }
//    protected function getMembership()
//    {
//        $membershipId = HolderMembership::find()
//            ->select([HolderMembership::tableName() . '.membership_id AS membership_id'])
//            ->innerJoinWith(['holder'])
//            ->where([HolderMembership::tableName() . '.holder_ref' => $this->BOUser->miga_ref])
//            ->scalar();
//
//        if ($membershipId == NULL)
//            $membershipId = Membership::DEFAULT_MEMBERSHIP;
//
//        return Membership::findOne($membershipId)->toArray();
//    }
}
