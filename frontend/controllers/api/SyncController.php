<?php

namespace frontend\controllers\api;

use common\helpers\ApiHandler;
use Yii;

//use yii\console\Controller;

class SyncController extends MasterController {

    public function beforeAction($action) {
        //ini_set('memory_limit', '-1');
        ini_set('max_execution_time', 3600);

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Receive ONE row and save to DB
     * @throws \Exception
     */
    public function actionReceive() {
        if (!Yii::$app->request->isPost) {
            ApiHandler::failure(['success' => false, 'msg' => 'Invalid method']);
        }
        $content = Yii::$app->request->post('content');
        $transformColumns = Yii::$app->request->post('transformColumns');

        if (!$content) {
            ApiHandler::success200(['success' => true, 'msg' => 'Nothing received']);
        }

        $decodedContent = json_decode($content);

        if ($syncConfig = $this->checkTable($decodedContent->table_name)) {

            /*
             * SOLUTION B - Prepare direct SQL statement
             */

            if ($syncConfig->sync_type == "1way") {
                $this->oneWaySync($decodedContent);
            } elseif ($syncConfig->sync_type == "2way") {
                $this->twoWaySync($decodedContent, $transformColumns);
            } else {
                throw new \Exception("Invalid sync_type {$syncConfig->sync_type}");
            }
//            echo "Result = $result, new_id=$id";
        } else {
            ApiHandler::failure(['action' => 'failed', 'id' => null]);
        }
    }

    public function actionSend() {
        if (!Yii::$app->request->isPost) {
            ApiHandler::failure(['success' => false, 'msg' => 'Invalid method']);
        }
        
        $table_name = Yii::$app->request->post('table_name');
        $sync_time = Yii::$app->request->post('sync_time');

        if (!$table_name) {
            ApiHandler::success200(['success' => true, 'msg' => "Invalid table name $table_name"]);
        }

        $selectSql = "SELECT 1 FROM $table_name LIMIT 1";

        $connection = Yii::$app->dbAifin;
        $command = $connection->createCommand($selectSql);
        $result = $command->queryOne();

        if (!$result) {
            ApiHandler::success200(['success' => true, 'msg' => "table $table_name is empty"]);
        }

        // prepare full table Primary key array list for deletion cross-checking
        $fullPKSql = "SELECT id FROM $table_name";

        $connection = Yii::$app->dbAifin;
        $command = $connection->createCommand($fullPKSql);
        $fullPKResults = $command->queryColumn();

//        var_dump($fullPKResults);        die();

        $sql = "SELECT * FROM $table_name WHERE created_at > '$sync_time' OR updated_at > '$sync_time' OR deleted_at > '$sync_time'";

        $connection = Yii::$app->dbAifin;
        $command = $connection->createCommand($sql);
        $results = $command->queryAll();
        
//        var_dump($sql);
//        var_dump($results); die();
        
        ApiHandler::custom(["success" => true, "content" => $results, "full_pks" => $fullPKResults]);

//            echo "Result = $result, new_id=$id";
    }

    /**
     * sync_type is 1way or 2way
     * @param string $tableName
     * @return SyncConfig model
     */
    public function checkTable($tableName) {
        $syncConfig = \common\models\SyncConfig::find()->where(['table_name' => $tableName, 'status' => 1])->one();

        if ($syncConfig) {
            return $syncConfig;
        }
        return FALSE;
    }

    private function oneWaySync($decodedContent) {
        $connection = Yii::$app->dbAifin;

        $columnValueSql = '';
        $valueSql = '';

        $rowData = json_decode($decodedContent->json_content);
        
        // IMPORTANT! In oneWaySync, slave table PK should always EUQAL to Master table PK!
        $rowId = $decodedContent->source_row_pk;

        if ($rowId > 0) {
            // Check if the record already exist
            $selectSql = "SELECT (1) FROM {$decodedContent->table_name} WHERE id=$rowId";

            $command = $connection->createCommand($selectSql);
            $result = $command->queryOne();

            if ($decodedContent->source_row_deleted == 1) {
                $action = 'delete';
            } else {
                if (!$result) {
                    $action = 'insert';
                } else {
                    $action = 'update';
                }
            }
        } else {
            $action = 'insert';
        }

        foreach ($rowData as $key => $columnValue) {
            $columnValueSql .= "" . $key . ",";
            if ($columnValue != null) {
                $valueSql .= "'" . $columnValue . "',";
            } else {
                $valueSql .= "null,";
            }
        }
        // remove trailing comma
        $columnValueSql = rtrim($columnValueSql, ',');
        $valueSql = rtrim($valueSql, ',');

        if ($action == 'insert' || $action == 'update') {
            if ($action == 'insert') {
                $finalSql = "INSERT INTO {$decodedContent->table_name} ($columnValueSql) VALUES ($valueSql)";
            } elseif ($action == 'update') {
                // prepare UPDATE QUERY
                $finalSql = "UPDATE {$decodedContent->table_name} SET ";

                foreach ($rowData as $key => $columnValue) {
                    $finalSql .= $key . "=";
                    if ($columnValue != null) {
                        $finalSql .= "'" . $columnValue . "',";
                    } else {
                        $finalSql .= "null,";
                    }
                }
                $finalSql = rtrim($finalSql, ',');
                $finalSql .= " WHERE id=$rowId";
            }
        } else {
            $finalSql = "DELETE FROM {$decodedContent->table_name} WHERE id=$rowId";
        }

        /*
         * EXECUTE the statement
         */
        $command = $connection->createCommand($finalSql);
        $result = $command->execute();

        if ($action == "insert") {
            $id = Yii::$app->dbAifin->getLastInsertID();
        }
        ApiHandler::success200(['success' => true, 'action' => $action, 'id' => $rowId, 'sql' => $finalSql]);
    }

    private function twoWaySync($decodedContent, $transformColumns) {
//        var_dump($transformColumns); die();
        $connection = Yii::$app->dbAifin;

        $columnValueSql = '';
        $valueSql = '';

        if ($transformColumns) {
            $transformColumns = json_decode($transformColumns);
        }

        $rowData = json_decode($decodedContent->json_content);

//        var_dump($decodedContent);
//        var_dump($rowData);
//        die();

        if ($decodedContent->sat_row_pk > 0) {
            // Check if the record already exist, do NOT set status=1 since source row could be soft-deleted
            $selectSql = "SELECT (1) FROM {$decodedContent->table_name} WHERE id={$decodedContent->sat_row_pk}";
//echo $selectSql."<br>";
            $command = $connection->createCommand($selectSql);
            $result = $command->queryOne();

            if ($decodedContent->source_row_deleted == 1) {
                $action = 'delete';
            } else {
                if (!$result) {
                    $action = 'insert';
                } else {
                    $action = 'update';
                }
            }
        } else {
            $action = 'insert';
        }
//        var_dump($rowData);        die();

        if ($action == 'insert' || $action == 'update') {
            foreach ($rowData as $key => $columnValue) {
                // skip source_row_pk
//                if ($key == "source_row_pk") {
//                    continue;
//                }
//            echo("Processing key=$key, value=$columnValue<br>");
                // redirect row ID to source_row_pk
                if ($key == 'id') {
//                    if ($action == 'insert') {
//                        $columnValueSql .= "source_row_pk,";
//                        $valueSql .= $columnValue . ",";
//                    } else {
//                        $valueSql .= "source_row_pk=" . $columnValue . ",";
//                    }
                } else {

                    // if incoming item has transform_columns value, consider it
                    if ($transformColumns) {
                        foreach ($transformColumns as $transformColumnKey => $transformColumn) {

                            if ($transformColumnKey == $key) {
//                            echo("Transforming $transformColumnKey<br>");

                                if (!isset($rowData->$transformColumnKey)) {
                                    $this->dump($rowData);
                                    die();
                                } else {
                                    $rowId = $rowData->$transformColumnKey;
                                }

                                $sql = "SELECT id FROM $transformColumn WHERE status=1 AND source_row_pk=$rowId";
//                            echo("$sql<br>");

                                self::log($sql);
                                $command = $connection->createCommand($sql);
                                $result = $command->queryScalar();

                                if (!$result) {
                                    var_dump(self::$log);
                                    var_dump("Unable to transform column. SQL=$sql");
                                    var_dump($decodedContent);
                                    die();
                                }
//                            echo("got $transformColumn id=$result<br>");

                                $columnValueSql .= "$key,";

                                if ($action == 'insert') {
                                    if ($result != null && $result <> '') {
                                        $valueSql .= "'" . $result . "',";
                                    } else {
                                        $valueSql .= "null,";
                                    }
                                } else {
                                    if ($result != null && $result <> '') {
                                        $valueSql .= "$key=\"" . $result . "\",";
                                    } else {
                                        $valueSql .= "$key=null,";
                                    }
                                }
                            } else {

                                if ($action == 'insert') {
                                    $columnValueSql .= "$key,";

                                    if ($columnValue != null && $columnValue <> '') {
                                        $valueSql .= '"' . $columnValue . '",';
                                    } else {
                                        $valueSql .= "null,";
                                    }
                                } else {
                                    if ($result != null && $columnValue <> '') {
                                        $valueSql .= $key . '="' . $columnValue . '",';
                                    } else {
                                        $valueSql .= "$key=null,";
                                    }
                                }
                            }
                        }
                    } else {
                        if ($action == 'insert') {
                            $columnValueSql .= "$key,";
                            if ($columnValue != null && $columnValue <> '') {
                                $valueSql .= '"' . $columnValue . '",';
                            } else {
                                $valueSql .= "null,";
                            }
                        } else {
                            if ($columnValue != null && $columnValue <> '') {
                                $valueSql .= $key . '="' . $columnValue . '",';
                            } else {
                                $valueSql .= "$key=null,";
                            }
                        }
                    }
                }
            }
        } else {
            $finalSql = "DELETE FROM {$decodedContent->table_name} WHERE id={$decodedContent->sat_row_pk}";
        }

        // remove trailing comma
        $columnValueSql = rtrim($columnValueSql, ',');
        $valueSql = rtrim($valueSql, ',');

        if ($action == 'insert') {
            $finalSql = "INSERT INTO {$decodedContent->table_name} ($columnValueSql) VALUES ($valueSql)";
        } elseif ($action == 'update') {
            // prepare UPDATE QUERY
            $finalSql = "UPDATE {$decodedContent->table_name} SET " . $valueSql;
            $finalSql = rtrim($finalSql, ',');
            $finalSql .= " WHERE id={$decodedContent->sat_row_pk}";
        }
//        echo("$finalSql<br>");
//        die();

        /*
         * EXECUTE the statement
         */
        $command = $connection->createCommand($finalSql);
        $result = $command->execute();

        if ($action == "insert") {
            $id = Yii::$app->dbAifin->getLastInsertID();
        } else {
            $id = $decodedContent->sat_row_pk;
        }
        ApiHandler::success200(['success' => true, 'action' => $action, 'id' => $id, 'sql' => $finalSql]);
    }

}
